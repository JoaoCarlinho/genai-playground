# version: '3.9'
services:

  backend:
    platform: linux/amd64
    build:
      context: ../app
    ports:
      - '5005:5005'
    restart: always
    env_file:
      - ./.env
    volumes:
      - ../data/lake/backend_persistent_storage/palm_videos:/api_data/palm_videos
      - ../data/lake/backend_persistent_storage/sf_split:/api_data/sf_split
      - ../raw-data/metadata/berkeley-listings:/raw-data/metadata/berkeley-listings
      - ../raw-data/metadata/job-applicant-listings:/raw-data/metadata/job-applicant-listings
    depends_on:
      - db
      - redis
    networks:
      - elastic
    # deploy:
    #   resources:
    #     limits:
    #       memory: 2G

  ollama:
    image: ollama/ollama:latest
    ports:
      - 11434:11434
    volumes:
      - ollama_embedding_storage:/root/.ollama
      - ../inference_models/Modelfile:/root/Modelfile
    restart: "no" # Prevent automatic restart
    # devices:
    #   - driver: nvidia
    #     capabilities: [gpu]
    #     count: all
    environment:
      OLLAMA_HOST: 0.0.0.0:11434
    networks:
      - elastic

  # twollama:
  #   image: ollama/ollama:latest
  #   ports:
  #     - 11435:11434
  #   volumes:
  #     - ollama_prompt_storage:/root/.ollama
  #   restart: "no" # Prevent automatic restart
  #   # devices:
  #   #   - driver: nvidia
  #   #     capabilities: [gpu]
  #   #     count: all
  #   environment:
  #     OLLAMA_HOST: 0.0.0.0:11435
  #   networks:
  #     - elastic
  
  # quantizer:
  #   image: ollama/ollama:latest
  #   container_name: ollama_quantizer
  #   command: ["twollama", "create", "llama3.2-quantized", "-f", "/root/Modelfile"]
  #   volumes:
  #     - ollama_prompt_storage:/root/.ollama # Share the same volume for models
  #      # Share the same volume for models
  #     - ./Modelfile:/root/Modelfile
  #   depends_on:
  #     - twollama # Ensure Ollama service is running

  db:
    container_name: postgres
    image: postgres:15.1-bullseye
    hostname: postgres
    ports:
      - '5432:5432'
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=flasktodos
    volumes:
      - ../data/database:/var/lib/postgresql/data
      - ../app/alembic:/app/alembic
    restart: always
    networks:
      - elastic

  minio:
    image: minio/minio
    command: server --console-address ":9001" /data
    ports:
      - '9000:9000'
      - '9001:9001'
    networks:
      - elastic
    volumes:
      - '../data/lake/backend_persistent_storage:/data'
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
      - MINIO_DEFAULT_BUCKETS=cloud-object-storage

  redis:
    image: redis:7
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - elastic

  rqworker:
    build: 
      context: ../app
      dockerfile: RQWorkerDockerfile
    deploy:
      mode: replicated
      replicas: 3
    command: rq worker --url redis://redis:6379 tasks
    depends_on:
      - redis
    networks:
      - elastic
    volumes:
      - ../raw-data/metadata:/raw-data/metadata
      - ../data/lake/backend_persistent_storage/palm_videos/process:/api_data/palm_videos/process
      - ../data/lake/backend_persistent_storage/split:/api_data/split
      - ../data/lake/backend_persistent_storage/sf_split:/api_data/sf_split
    mem_limit: ${MEM_LIMIT}
  
  rqdashboard:
    image: eoranged/rq-dashboard
    platform: linux/amd64
    ports:
      - "9181:9181"
    environment:
      - RQ_DASHBOARD_REDIS_URL=redis://redis:6379
    depends_on:
      - redis
    networks:
      - elastic

  # frontend:
  #   container_name: react
  #   build:
  #     context: ../frontend
  #   ports:
  #     - "8080:3000"
  #   depends_on:
  #     - backend
  #   networks:
  #     - elastic

  nginx:
    container_name: nginx
    image: nginx:latest
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./etc/nginx/nginx.conf:/etc/nginx/conf.d/default.conf
    depends_on:
      # - frontend
      - backend
    networks:
      - elastic

# ES cluster
  setup:
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
    user: "0"
    command: >
      bash -c '
        if [ x${ELASTIC_PASSWORD} == x ]; then
          echo "Set the ELASTIC_PASSWORD environment variable in the .env file";
          exit 1;
        elif [ x${KIBANA_PASSWORD} == x ]; then
          echo "Set the KIBANA_PASSWORD environment variable in the .env file";
          exit 1;
        fi;
        if [ ! -f config/certs/ca.zip ]; then
          echo "Creating CA";
          bin/elasticsearch-certutil ca --silent --pem -out config/certs/ca.zip;
          unzip config/certs/ca.zip -d config/certs;
        fi;
        if [ ! -f config/certs/certs.zip ]; then
          echo "Creating certs";
          echo -ne \
          "instances:\n"\
          "  - name: es01\n"\
          "    dns:\n"\
          "      - es01\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          "  - name: es02\n"\
          "    dns:\n"\
          "      - es02\n"\
          "      - localhost\n"\
          "    ip:\n"\
          "      - 127.0.0.1\n"\
          > config/certs/instances.yml;
          bin/elasticsearch-certutil cert --silent --pem -out config/certs/certs.zip --in config/certs/instances.yml --ca-cert config/certs/ca/ca.crt --ca-key config/certs/ca/ca.key;
          unzip config/certs/certs.zip -d config/certs;
        fi;
        echo "Setting file permissions"
        chown -R root:root config/certs;
        find . -type d -exec chmod 750 \{\} \;;
        find . -type f -exec chmod 640 \{\} \;;
        echo "Waiting for Elasticsearch availability";
        until curl -s --cacert config/certs/ca/ca.crt https://es01:9200 | grep -q "missing authentication credentials"; do sleep 30; done;
        echo "Setting kibana_system password";
        until curl -s -X POST --cacert config/certs/ca/ca.crt -u "elastic:${ELASTIC_PASSWORD}" -H "Content-Type: application/json" https://es01:9200/_security/user/kibana_system/_password -d "{\"password\":\"${KIBANA_PASSWORD}\"}" | grep -q "^{}"; do sleep 10; done;
        echo "All done!";
      '
    healthcheck:
      test: ["CMD-SHELL", "[ -f config/certs/es01/es01.crt ]"]
      interval: 1s
      timeout: 5s
      retries: 120
    networks:
      - elastic

  es01:
    depends_on: # test with `curl -u kibana_system:hjfkljgh9765 -k GET "https://localhost:9200/_cluster/health?pretty"`
      setup:
        condition: service_healthy
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata01:/usr/share/elasticsearch/data
      - ../backups/elasticsearch:/usr/share/elasticsearch/backup   # <-- add this line
    ports:
      - ${ES_PORT}:9200
      - 9300:9300
    environment:
      - node.name=es01
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02
      - discovery.seed_hosts=es01,es02
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es01/es01.key
      - xpack.security.http.ssl.certificate=certs/es01/es01.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es01/es01.key
      - xpack.security.transport.ssl.certificate=certs/es01/es01.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - path.repo=/usr/share/elasticsearch/backup # support backups
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic

  es02:
    depends_on:
      - es01
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata02:/usr/share/elasticsearch/data
      - ../backups/elasticsearch:/usr/share/elasticsearch/backup
    environment:
      - node.name=es02
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02
      - discovery.seed_hosts=es01,es02
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es02/es02.key
      - xpack.security.http.ssl.certificate=certs/es02/es02.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es02/es02.key
      - xpack.security.transport.ssl.certificate=certs/es02/es02.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - path.repo=/usr/share/elasticsearch/backup # support backups
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic

  es03:
    depends_on:
      - es02
    image: docker.elastic.co/elasticsearch/elasticsearch:${STACK_VERSION}
    volumes:
      - certs:/usr/share/elasticsearch/config/certs
      - esdata03:/usr/share/elasticsearch/data
      - ../backups/elasticsearch:/usr/share/elasticsearch/backup
    environment:
      - node.name=es03
      - cluster.name=${CLUSTER_NAME}
      - cluster.initial_master_nodes=es01,es02,es03
      - discovery.seed_hosts=es01,es02,es03
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
      - bootstrap.memory_lock=true
      - xpack.security.enabled=true
      - xpack.security.http.ssl.enabled=true
      - xpack.security.http.ssl.key=certs/es03/es03.key
      - xpack.security.http.ssl.certificate=certs/es03/es03.crt
      - xpack.security.http.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.enabled=true
      - xpack.security.transport.ssl.key=certs/es03/es03.key
      - xpack.security.transport.ssl.certificate=certs/es03/es03.crt
      - xpack.security.transport.ssl.certificate_authorities=certs/ca/ca.crt
      - xpack.security.transport.ssl.verification_mode=certificate
      - xpack.license.self_generated.type=${LICENSE}
      - xpack.ml.use_auto_machine_memory_percent=true
      - path.repo=/usr/share/elasticsearch/backup # support backups
    mem_limit: ${MEM_LIMIT}
    ulimits:
      memlock:
        soft: -1
        hard: -1
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s --cacert config/certs/ca/ca.crt https://localhost:9200 | grep -q 'missing authentication credentials'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic

  kibana:
    depends_on:
      es01:
        condition: service_healthy
      es02:
        condition: service_healthy
      # es03:
      #   condition: service_healthy
    image: docker.elastic.co/kibana/kibana:${STACK_VERSION}
    volumes:
      - certs:/usr/share/kibana/config/certs
      - kibanadata:/usr/share/kibana/data
    ports:
      - ${KIBANA_PORT}:5601
    environment:
      - SERVERNAME=kibana
      - ELASTICSEARCH_HOSTS=https://es01:9200
      - ELASTICSEARCH_USERNAME=kibana_system
      - ELASTICSEARCH_PASSWORD=${KIBANA_PASSWORD}
      - ELASTICSEARCH_SSL_CERTIFICATEAUTHORITIES=config/certs/ca/ca.crt
    mem_limit: ${MEM_LIMIT}
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "curl -s -I http://localhost:5601 | grep -q 'HTTP/1.1 302 Found'",
        ]
      interval: 10s
      timeout: 10s
      retries: 120
    networks:
      - elastic

volumes:
  certs:
    driver: local
  data: {}
  esdata01:
    driver: local
  esdata02:
    driver: local
  # esdata03:
  #   driver: local
  kibanadata:
    driver: local
  ollama_embedding_storage:
    driver: local
  ollama_prompt_storage:
    driver: local


networks:
  elastic:
    driver: bridge